
#  Projekt: Pogoda międzynarodowa


#  Program działa na zasadzie połączenia ze stroną openweathermap.org z której pobiera dane pogodowe.

#  1.	W pierwszej kolejności sprawdza czy użytkownik posiada biblioteki requests bez których nie połączy się z internetem.
#  2.	Sprawdza czy na którymś z dysków jest plik config.ini w którym jest zawarty klucz API.
#  2a.  Jeżeli nie ma takiego pliku z kluczem prosi o jego ręczne podanie przez użytkownika.
#  3.	Po wprowadzeniu odnalezieniu klucza API klucza lub jego wprowadzeniu przez użytkownika program prosi o podanie miasta.
#  4.	Program wysyła zapytanie do strony openweathermap.org. W zapytaniu jest zawarty klucz API oraz miasto.
#  5.	W przypadku poprawnego połączenia ze stroną, podania właściwego klucza API oraz istniejącego w bazie openweathermap.org miasta użytkownik otrzymuje zwrotnie nazwę podanego miasta, aktualna temperaturę oraz stopień zachmurzenia. 

try:
    import requests  # Próbujemy zaimportować moduł 'requests', który jest potrzebny do wykonywania zapytań HTTP
except ModuleNotFoundError:
    print("Moduł 'requests' nie jest zainstalowany. Zainstaluj go, wykonując 'pip install requests'.")
    exit(1)  # Jeśli moduł nie jest zainstalowany, wyświetlamy komunikat i kończymy działanie programu

import configparser  # Importujemy moduł 'configparser' do pracy z plikami konfiguracyjnymi
import os  # Importujemy moduł 'os' do operacji na plikach i ścieżkach plików

def pobierz_pogode(miasto, klucz_api):
    # Tworzymy URL do API OpenWeatherMap z podanym miastem i kluczem API
    url = f"https://api.openweathermap.org/data/2.5/weather?q={miasto}&appid={klucz_api}&units=metric&lang=pl"
    response = requests.get(url)  # Wysyłamy zapytanie HTTP GET do API

    # Sprawdzamy status odpowiedzi
    if response.status_code == 200:
        dane = response.json()  # Jeśli status 200 (OK), przekształcamy odpowiedź do formatu JSON
        temperatura = dane['main']['temp']  # Pobieramy temperaturę z odpowiedzi
        opis = dane['weather'][0]['description']  # Pobieramy opis pogody z odpowiedzi
        return f"Pogoda w {miasto}: {temperatura:.1f}°C, {opis}"  # Zwracamy sformatowany tekst z wynikami
    elif response.status_code == 401:
        return "Wystąpił błąd autoryzacji. Sprawdź poprawność klucza API."  # Błąd autoryzacji, niepoprawny klucz API
    elif response.status_code == 404:
        return "Nie odnaleziono miasta. Sprawdź poprawność nazwy miasta."  # Błąd 404, miasto nie zostało znalezione
    else:
        return f"Wystąpił błąd: {response.status_code}"  # Inny błąd, zwracamy kod statusu

def get_api_key_from_pendrive():
    # Lista możliwych punktów montowania pendrive'a w systemie
    possible_mount_points = ['D:\\', 'E:\\', 'F:\\', 'G:\\', 'H:\\', '/mnt/usb']
    for mount_point in possible_mount_points:
        config_path = os.path.join(mount_point, 'config.ini')  # Tworzymy pełną ścieżkę do pliku konfiguracyjnego
        if os.path.exists(config_path):  # Sprawdzamy, czy plik istnieje
            config = configparser.ConfigParser()  # Tworzymy obiekt ConfigParser
            config.read(config_path)  # Wczytujemy plik konfiguracyjny
            return config['openweathermap']['klucz_api']  # Zwracamy klucz API z pliku konfiguracyjnego
    return None  # Jeśli plik nie został znaleziony, zwracamy None

# Pobieramy klucz API z pendrive'a
klucz_api = get_api_key_from_pendrive()

if not klucz_api:
    # Jeśli nie znaleziono klucza API na pendrive, prosimy użytkownika o jego podanie
    klucz_api = input("Nie znaleziono klucza API na pendrive. Podaj klucz API do openweathermap.org: ")

miasto = input("Podaj nazwę miasta: ")  # Prosimy użytkownika o podanie nazwy miasta
print(pobierz_pogode(miasto, klucz_api))  # Wyświetlamy wyniki pogody dla podanego miasta
