# -*- coding: utf-8 -*-
"""String.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/193c67fBe8ug98faCg15t6XF-tU8ELqdG

1. Write a Python program to calculate the length of a string.
"""

word = input("Give me word:")
print(len(word))

"""2. Write a Python program to get a string made of the first 2 and last 2 characters of a given string. If the string length is less than 2, return the empty string instead."""

word = input("Give me word: ")
def modify_string(word):
  if (len(word) > 1):
    message = (word[:2]) + (word[-2:])
  else:
    message = "empty string"
  return message
print(modify_string(word))

"""3. Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself."""

word = input("Give me word: ")
def word_with_S(word):
  first_letter = word[0]
  word_without_first_leter = word[1:]
  new_word = first_letter + word_without_first_leter.replace(first_letter, "$")
  return new_word
print(word_with_S(word))

"""4.Write a Python program to count the number of characters (character frequency) in a string."""

word = input("Give me word: ")
def counting_letter(word):
    for letter in word:
        count = word.count(letter)
        print(f"'{letter}: {count} ",end="")
print(counting_letter(word))

"""5. Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string."""

def swap_first_two_characters(string1, string2):
    # Sprawdzenie czy obie strony mają co najmniej dwa znaki
    if len(string1) < 2 or len(string2) < 2:
        return "Obie strony muszą mieć co najmniej dwa znaki."
    new_string1 = string2[:2] + string1[2:]
    new_string2 = string1[:2] + string2[2:]
    result = new_string1 + " " + new_string2
    return result
string1 = input("Podaj pierwszy ciąg znaków: ")
string2 = input("Podaj drugi ciąg znaków: ")
result = swap_first_two_characters(string1, string2)
print("Wynik: ", result)

"""6. Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing', add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged."""

word = str(input("Give any word: "))
def add_ing_or_ly(string):
    if len(string) < 3:
        return string
    elif string.endswith('ing'):
        return string + 'ly'
    else:
        return string + 'ing'
add_ing_or_ly(word)

"""7. Write a Python program to find the first appearance of the substrings 'not' and 'poor' in a given string. If 'not' follows 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string."""

def replace_not_poor(string):
    index_not = string.find('not')
    index_poor = string.find('poor')
    if index_not != -1 and index_poor != -1 and index_not < index_poor:
        string = string[:index_not] + 'good' + string[index_poor+4:]
    return string
input_string = input("Podaj ciąg znaków: ")
result = replace_not_poor(input_string)
print("Wynik: ", result)

"""8. Write a Python function that takes a list of words and return the longest word and the length of the longest one."""

def find_longest_word(words):
    if not words:
        return None, 0
    longest_word = max(words, key=len)
    length_of_longest_word = len(longest_word)
    return longest_word, length_of_longest_word
word_list = ['apple', 'banana', 'cherry', 'grapefruit', 'kiwi']
longest_word, length_of_longest_word = find_longest_word(word_list)
print("Najdłuższe słowo:", longest_word)
print("Długość najdłuższego słowa:", length_of_longest_word)

"""9. Write a Python program to remove the nth index character from a nonempty string."""

def remove_nth_character(string, n):
    if 0 <= n < len(string):
        new_string = string[:n] + string[n+1:]
        return new_string
    else:
        return "Indeks poza zakresem ciągu znaków."
input_string = input("Podaj ciąg znaków: ")
index_to_remove = int(input("Podaj indeks znaku do usunięcia: "))
result = remove_nth_character(input_string, index_to_remove)
print("Wynik:", result)

"""10. Write a Python program to change a given string to a newly string where the first and last chars have been exchanged."""

def exchange_first_last(string):
    if len(string) < 2:
        return "Ciąg znaków musi zawierać co najmniej dwa znaki."
    new_string = string[-1] + string[1:-1] + string[0]
    return new_string
input_string = input("Podaj ciąg znaków: ")
result = exchange_first_last(input_string)
print("Wynik:", result)

"""11. Write a Python program to remove characters that have odd index values in a given string."""

def remove_odd_index_chars(string):
    new_string = string[::2]
    return new_string
input_string = input("Podaj ciąg znaków: ")
result = remove_odd_index_chars(input_string)
print("Wynik:", result)

"""12. Write a Python program that accepts a comma-separated sequence of words as input and prints the distinct words in sorted form (alphanumerically)."""

def print_sorted_unique_words_as_string(sequence):
    words = sequence.split(',')
    unique_words = set(word.strip() for word in words)
    sorted_unique_words = sorted(unique_words)
    result = ', '.join(sorted_unique_words)
    print("Posortowane unikalne słowa jako ciąg:")
    print(result)
input_sequence = input("Podaj ciąg słów oddzielonych przecinkami: ")
print_sorted_unique_words_as_string(input_sequence)

"""13. Write a Python function to reverse a string if its length is a multiple of 4."""

def reverse_string_if_multiple_of_4(str1):
    if len(str1) % 4 == 0:
        return ''.join(reversed(str1))
    else:
        return str1
print(reverse_string_if_multiple_of_4('abcd'))
print(reverse_string_if_multiple_of_4('python'))

"""14. Write a Python function to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters."""

def convert_to_uppercase(str1):
    first_4_chars = str1[:4]
    uppercase_count = sum(1 for char in first_4_chars if char.isupper())
    if uppercase_count >= 2:
        return str1.upper()
    else:
        return str1
print(convert_to_uppercase('abCD'))
print(convert_to_uppercase('AbCd'))
print(convert_to_uppercase('aBCd'))
print(convert_to_uppercase('abcdef'))

"""15. Write a Python program to sort a string lexicographically."""

def lexicographic_sort(str1):
    return ''.join(sorted(str1))
print(lexicographic_sort('banana'))
print(lexicographic_sort('python'))

"""16. Write a Python program to display a number with a comma separator."""

number = int(input("Give a number: "))
def format_with_commas(number):
    return "{:,}".format(number)
format_with_commas(number)

"""17. Write a Python program to format a number with a percentage."""

def format_percentage(number):
    formatted_percentage = "{:.2%}".format(number)
    return formatted_percentage
print(format_percentage(0.507))

"""18. Write a Python program to reverse a string."""

def reverse_string(input_string):
    reversed_string = input_string[::-1]
    return reversed_string
print(reverse_string('hello'))

"""19. Write a Python program to reverse words in a string."""

def reverse_words(input_string):
    words = input_string.split()
    reversed_words = reversed(words)
    reversed_string = ' '.join(reversed_words)
    return reversed_string
print(reverse_words('Hello world'))

"""20. Write a Python program to lowercase the first n characters in a string."""

def lowercase_first_n(input_string, n):
    first_n_chars = input_string[:n]
    lowercase_chars = first_n_chars.lower()
    rest_of_string = input_string[n:]
    return lowercase_chars + rest_of_string
print(lowercase_first_n('HELLO WORLD', 7))